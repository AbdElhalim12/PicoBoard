
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000466  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011e  0080011e  00000518  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c3  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000051c  00000000  00000000  0000061b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b9  00000000  00000000  00000b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000463  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c7  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020a  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  9e:	0c 94 31 02 	jmp	0x462	; 0x462 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ioinit>:
//Return:      
//usage: 
void ioinit(void)
{
	//All of Port C are inputs
	DDRC &= ~((1<<SLIDER)|(1<<RD)|(1<<RC)|(1<<SOUND)|(1<<RB)|(1<<RA)|(1<<LIGHT));
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	80 78       	andi	r24, 0x80	; 128
  aa:	87 b9       	out	0x07, r24	; 7
	//Don't enable any pull-ups!

	//Initialize Port D
	DDRD &= ~((1<<BUTTON)|(1<<RXI));	//Button and Rx pin are inputs
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8a 7f       	andi	r24, 0xFA	; 250
  b0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<BUTTON)|(1<<RXI);		//Enable the pull-ups for the Rx and Button pins
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	85 60       	ori	r24, 0x05	; 5
  b6:	8b b9       	out	0x0b, r24	; 11

	// USART Baud rate: 38400 (With 16 MHz Clock)
    UBRR0H = (MYUBRR >> 8) & 0x7F;	//Make sure highest bit(URSEL) is 0 indicating we are writing to UBRRH
  b8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = MYUBRR;
  bc:	83 e3       	ldi	r24, 0x33	; 51
  be:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0A = (1<<U2X0);					//Double the UART Speed
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);		//Enable Rx and Tx in UART
  c8:	88 e1       	ldi	r24, 0x18	; 24
  ca:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);		//8-Bit Characters
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	80 93 c2 00 	sts	0x00C2, r24
    stdout = &mystdout; //Required for printf init
  d4:	80 e1       	ldi	r24, 0x10	; 16
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	90 93 21 01 	sts	0x0121, r25
  dc:	80 93 20 01 	sts	0x0120, r24
	cli();
  e0:	f8 94       	cli
	
	// Init timer 2
	//Set Prescaler to 8. (Timer Frequency set to 16Mhz)
	//Used for delay routines
	TCCR2B = (1<<CS20); 	//Divde clock by 1 for 16 Mhz Timer 2 Frequency	
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 b1 00 	sts	0x00B1, r24
		
}
  e8:	08 95       	ret

000000ea <uart_putchar>:


static int uart_putchar(char c, FILE *stream)
{
  ea:	1f 93       	push	r17
  ec:	18 2f       	mov	r17, r24
  if (c == '\n')
  ee:	8a 30       	cpi	r24, 0x0A	; 10
  f0:	19 f4       	brne	.+6      	; 0xf8 <uart_putchar+0xe>
    uart_putchar('\r', stream);
  f2:	8d e0       	ldi	r24, 0x0D	; 13
  f4:	0e 94 75 00 	call	0xea	; 0xea <uart_putchar>
  
  loop_until_bit_is_set(UCSR0A, UDRE0);
  f8:	80 91 c0 00 	lds	r24, 0x00C0
  fc:	85 ff       	sbrs	r24, 5
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <uart_putchar+0xe>
  UDR0 = c;
 100:	10 93 c6 00 	sts	0x00C6, r17
  return 0;
}
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	1f 91       	pop	r17
 10a:	08 95       	ret

0000010c <uart_getchar>:

uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
 10c:	80 91 c0 00 	lds	r24, 0x00C0
 110:	87 ff       	sbrs	r24, 7
 112:	fc cf       	rjmp	.-8      	; 0x10c <uart_getchar>
	return(UDR0);
 114:	80 91 c6 00 	lds	r24, 0x00C6
}
 118:	08 95       	ret

0000011a <delay_us>:
        delay_us(1000);
}

//General short delays
void delay_us(uint16_t x)
{    
 11a:	9c 01       	movw	r18, r24
    TIFR2 = (1<<TOV2); //Clear any interrupt flags on Timer2
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	87 bb       	out	0x17, r24	; 23
    TCNT2= 240; //Setting counter to 239 will make it 16 ticks until TOV is set. .0625uS per click means 1 uS until TOV is set
 120:	80 ef       	ldi	r24, 0xF0	; 240
 122:	80 93 b2 00 	sts	0x00B2, r24
    while(x>0){
		while( (TIFR2 & (1<<TOV2)) == 0);
		TIFR2 = (1<<TOV2); //Clear any interrupt flags on Timer2
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	07 c0       	rjmp	.+14     	; 0x138 <delay_us+0x1e>
void delay_us(uint16_t x)
{    
    TIFR2 = (1<<TOV2); //Clear any interrupt flags on Timer2
    TCNT2= 240; //Setting counter to 239 will make it 16 ticks until TOV is set. .0625uS per click means 1 uS until TOV is set
    while(x>0){
		while( (TIFR2 & (1<<TOV2)) == 0);
 12a:	b8 9b       	sbis	0x17, 0	; 23
 12c:	fe cf       	rjmp	.-4      	; 0x12a <delay_us+0x10>
		TIFR2 = (1<<TOV2); //Clear any interrupt flags on Timer2
 12e:	97 bb       	out	0x17, r25	; 23
		TCNT2=240;
 130:	80 93 b2 00 	sts	0x00B2, r24
		x--;
 134:	21 50       	subi	r18, 0x01	; 1
 136:	30 40       	sbci	r19, 0x00	; 0
//General short delays
void delay_us(uint16_t x)
{    
    TIFR2 = (1<<TOV2); //Clear any interrupt flags on Timer2
    TCNT2= 240; //Setting counter to 239 will make it 16 ticks until TOV is set. .0625uS per click means 1 uS until TOV is set
    while(x>0){
 138:	21 15       	cp	r18, r1
 13a:	31 05       	cpc	r19, r1
 13c:	b1 f7       	brne	.-20     	; 0x12a <delay_us+0x10>
		while( (TIFR2 & (1<<TOV2)) == 0);
		TIFR2 = (1<<TOV2); //Clear any interrupt flags on Timer2
		TCNT2=240;
		x--;
	}
} 
 13e:	08 95       	ret

00000140 <delay_ms>:
	return(UDR0);
}

//General short delays
void delay_ms(uint16_t x)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
 146:	05 c0       	rjmp	.+10     	; 0x152 <delay_ms+0x12>
    for (; x > 0 ; x--)
        delay_us(1000);
 148:	88 ee       	ldi	r24, 0xE8	; 232
 14a:	93 e0       	ldi	r25, 0x03	; 3
 14c:	0e 94 8d 00 	call	0x11a	; 0x11a <delay_us>
}

//General short delays
void delay_ms(uint16_t x)
{
    for (; x > 0 ; x--)
 150:	21 97       	sbiw	r28, 0x01	; 1
 152:	20 97       	sbiw	r28, 0x00	; 0
 154:	c9 f7       	brne	.-14     	; 0x148 <delay_ms+0x8>
        delay_us(1000);
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <buildScratchPacket>:
		TCNT2=240;
		x--;
	}
} 

void buildScratchPacket(char * packet, int channel, int value){
 15c:	fc 01       	movw	r30, r24
	char upper_data=(char)((value&(unsigned int)0x380)>>7);	//Get the upper 3 bits of the value
	char lower_data=(char)(value&0x7f);	//Get the lower 7 bits of the value
	*packet++=((1<<7)|(channel<<3)|(upper_data));
 15e:	33 e0       	ldi	r19, 0x03	; 3
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	3a 95       	dec	r19
 166:	e1 f7       	brne	.-8      	; 0x160 <buildScratchPacket+0x4>
 168:	60 68       	ori	r22, 0x80	; 128
 16a:	ca 01       	movw	r24, r20
 16c:	80 78       	andi	r24, 0x80	; 128
 16e:	93 70       	andi	r25, 0x03	; 3
 170:	88 0f       	add	r24, r24
 172:	89 2f       	mov	r24, r25
 174:	88 1f       	adc	r24, r24
 176:	99 0b       	sbc	r25, r25
 178:	91 95       	neg	r25
 17a:	68 2b       	or	r22, r24
 17c:	60 83       	st	Z, r22
	*packet++=lower_data;
 17e:	4f 77       	andi	r20, 0x7F	; 127
 180:	41 83       	std	Z+1, r20	; 0x01
}
 182:	08 95       	ret

00000184 <sendScratchPacket>:

void sendScratchPacket(char * packet){
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	8c 01       	movw	r16, r24
	printf("%c", *packet++);
 18a:	fc 01       	movw	r30, r24
 18c:	80 81       	ld	r24, Z
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 c9 01 	call	0x392	; 0x392 <putchar>
	delay_us(400);
 194:	80 e9       	ldi	r24, 0x90	; 144
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 8d 00 	call	0x11a	; 0x11a <delay_us>
	printf("%c", *packet++);
 19c:	f8 01       	movw	r30, r16
 19e:	81 81       	ldd	r24, Z+1	; 0x01
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 c9 01 	call	0x392	; 0x392 <putchar>
	delay_us(400);
 1a6:	80 e9       	ldi	r24, 0x90	; 144
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 8d 00 	call	0x11a	; 0x11a <delay_us>
}
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <main>:

//================================================================


int main (void)
{	
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	df 93       	push	r29
 1be:	cf 93       	push	r28
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <main+0xe>
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
	char request=0;
	unsigned int sensor_value=0;
	char data_packet[2]="";
 1c6:	80 91 06 01 	lds	r24, 0x0106
 1ca:	90 91 07 01 	lds	r25, 0x0107
 1ce:	9a 83       	std	Y+2, r25	; 0x02
 1d0:	89 83       	std	Y+1, r24	; 0x01

	//Initialize AVR I/O, UART and Interrupts
    ioinit();
 1d2:	0e 94 53 00 	call	0xa6	; 0xa6 <ioinit>
	//Initialize the ADC
	adcInit(1,0,7);	//AVcc reference, Right Adjusted, 125kHz clock
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	47 e0       	ldi	r20, 0x07	; 7
 1dc:	0e 94 ad 01 	call	0x35a	; 0x35a <adcInit>
	
	printf("Start\n");
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <puts>
		
		//If we get the value 1 on the serial port, send the sensor values.
		if(request==SCRATCH_DATA_REQUEST)
		{	
			//Send the ID packet
			buildScratchPacket(data_packet, 15, 0x04);
 1e8:	8e 01       	movw	r16, r28
 1ea:	0f 5f       	subi	r16, 0xFF	; 255
 1ec:	1f 4f       	sbci	r17, 0xFF	; 255
			sendScratchPacket(data_packet);			
			
			//Read/Report Channel 7(Slider)
			sensor_value=adcRead(SLIDER);
			sensor_value=abs(1023-sensor_value);
			buildScratchPacket(data_packet, 7, sensor_value);
 1ee:	4f ef       	ldi	r20, 0xFF	; 255
 1f0:	e4 2e       	mov	r14, r20
 1f2:	43 e0       	ldi	r20, 0x03	; 3
 1f4:	f4 2e       	mov	r15, r20
  return 0;
}

uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
 1f6:	80 91 c0 00 	lds	r24, 0x00C0
 1fa:	87 ff       	sbrs	r24, 7
 1fc:	fc cf       	rjmp	.-8      	; 0x1f6 <main+0x42>
	return(UDR0);
 1fe:	80 91 c6 00 	lds	r24, 0x00C6
	while(1){

		request=uart_getchar();
		
		//If we get the value 1 on the serial port, send the sensor values.
		if(request==SCRATCH_DATA_REQUEST)
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	c1 f7       	brne	.-16     	; 0x1f6 <main+0x42>
		{	
			//Send the ID packet
			buildScratchPacket(data_packet, 15, 0x04);
 206:	c8 01       	movw	r24, r16
 208:	6f e0       	ldi	r22, 0x0F	; 15
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	44 e0       	ldi	r20, 0x04	; 4
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	0e 94 ae 00 	call	0x15c	; 0x15c <buildScratchPacket>
			sendScratchPacket(data_packet);
 214:	c8 01       	movw	r24, r16
 216:	0e 94 c2 00 	call	0x184	; 0x184 <sendScratchPacket>
			
			//Read/Report channel 0 (Resistance-D)
			sensor_value=adcRead(RD);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <adcRead>
 220:	ac 01       	movw	r20, r24
			buildScratchPacket(data_packet, 0, sensor_value);
 222:	c8 01       	movw	r24, r16
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	0e 94 ae 00 	call	0x15c	; 0x15c <buildScratchPacket>
			sendScratchPacket(data_packet);
 22c:	c8 01       	movw	r24, r16
 22e:	0e 94 c2 00 	call	0x184	; 0x184 <sendScratchPacket>
			
			//Read/Report Channel 1 (Resistance-C)
			sensor_value=adcRead(RC);
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 78 01 	call	0x2f0	; 0x2f0 <adcRead>
 238:	ac 01       	movw	r20, r24
			buildScratchPacket(data_packet, 1, sensor_value);
 23a:	c8 01       	movw	r24, r16
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	0e 94 ae 00 	call	0x15c	; 0x15c <buildScratchPacket>
			sendScratchPacket(data_packet);
 244:	c8 01       	movw	r24, r16
 246:	0e 94 c2 00 	call	0x184	; 0x184 <sendScratchPacket>

			//Read/Report Channel 2 (Resistance-B)
			sensor_value=adcRead(RB);
 24a:	84 e0       	ldi	r24, 0x04	; 4
 24c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <adcRead>
 250:	ac 01       	movw	r20, r24
			buildScratchPacket(data_packet, 2, sensor_value);
 252:	c8 01       	movw	r24, r16
 254:	62 e0       	ldi	r22, 0x02	; 2
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	0e 94 ae 00 	call	0x15c	; 0x15c <buildScratchPacket>
			sendScratchPacket(data_packet);			
 25c:	c8 01       	movw	r24, r16
 25e:	0e 94 c2 00 	call	0x184	; 0x184 <sendScratchPacket>

			//Read/Report Channel 3 (Button)
			if(PIND & (1<<BUTTON))sensor_value=0xffff;
 262:	4a 99       	sbic	0x09, 2	; 9
 264:	03 c0       	rjmp	.+6      	; 0x26c <main+0xb8>
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <main+0xbc>
 26c:	4f ef       	ldi	r20, 0xFF	; 255
 26e:	5f ef       	ldi	r21, 0xFF	; 255
			else sensor_value=0;
			buildScratchPacket(data_packet, 3, sensor_value);
 270:	c8 01       	movw	r24, r16
 272:	63 e0       	ldi	r22, 0x03	; 3
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	0e 94 ae 00 	call	0x15c	; 0x15c <buildScratchPacket>
			sendScratchPacket(data_packet);	
 27a:	c8 01       	movw	r24, r16
 27c:	0e 94 c2 00 	call	0x184	; 0x184 <sendScratchPacket>
			
			//Read/Report Channel 4(Resistance-A)
			sensor_value=adcRead(RA);
 280:	85 e0       	ldi	r24, 0x05	; 5
 282:	0e 94 78 01 	call	0x2f0	; 0x2f0 <adcRead>
 286:	ac 01       	movw	r20, r24
			buildScratchPacket(data_packet, 4, sensor_value);
 288:	c8 01       	movw	r24, r16
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	0e 94 ae 00 	call	0x15c	; 0x15c <buildScratchPacket>
			sendScratchPacket(data_packet);		
 292:	c8 01       	movw	r24, r16
 294:	0e 94 c2 00 	call	0x184	; 0x184 <sendScratchPacket>

			//Read/Report Channel 5(LIGHT)
			sensor_value=adcRead(LIGHT);
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <adcRead>
 29e:	ac 01       	movw	r20, r24
			buildScratchPacket(data_packet, 5, sensor_value);
 2a0:	c8 01       	movw	r24, r16
 2a2:	65 e0       	ldi	r22, 0x05	; 5
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	0e 94 ae 00 	call	0x15c	; 0x15c <buildScratchPacket>
			sendScratchPacket(data_packet);	
 2aa:	c8 01       	movw	r24, r16
 2ac:	0e 94 c2 00 	call	0x184	; 0x184 <sendScratchPacket>

			//Read/Report Channel 6(Sound)
			sensor_value=adcRead(SOUND);
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <adcRead>
 2b6:	ac 01       	movw	r20, r24
			buildScratchPacket(data_packet, 6, sensor_value);
 2b8:	c8 01       	movw	r24, r16
 2ba:	66 e0       	ldi	r22, 0x06	; 6
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	0e 94 ae 00 	call	0x15c	; 0x15c <buildScratchPacket>
			sendScratchPacket(data_packet);			
 2c2:	c8 01       	movw	r24, r16
 2c4:	0e 94 c2 00 	call	0x184	; 0x184 <sendScratchPacket>
			
			//Read/Report Channel 7(Slider)
			sensor_value=adcRead(SLIDER);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 78 01 	call	0x2f0	; 0x2f0 <adcRead>
			sensor_value=abs(1023-sensor_value);
			buildScratchPacket(data_packet, 7, sensor_value);
 2ce:	a7 01       	movw	r20, r14
 2d0:	48 1b       	sub	r20, r24
 2d2:	59 0b       	sbc	r21, r25
 2d4:	57 ff       	sbrs	r21, 7
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <main+0x12a>
 2d8:	50 95       	com	r21
 2da:	41 95       	neg	r20
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
 2de:	c8 01       	movw	r24, r16
 2e0:	67 e0       	ldi	r22, 0x07	; 7
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	0e 94 ae 00 	call	0x15c	; 0x15c <buildScratchPacket>
			sendScratchPacket(data_packet);		
 2e8:	c8 01       	movw	r24, r16
 2ea:	0e 94 c2 00 	call	0x184	; 0x184 <sendScratchPacket>
 2ee:	83 cf       	rjmp	.-250    	; 0x1f6 <main+0x42>

000002f0 <adcRead>:
//Usage: adcRead(4);
unsigned int adcRead(char channel)
{
	unsigned int adc_value=0;
	
	ADMUX = (ADMUX & 0xF0);	//Mask OFF the previous ADC channel
 2f0:	90 91 7c 00 	lds	r25, 0x007C
 2f4:	90 7f       	andi	r25, 0xF0	; 240
 2f6:	90 93 7c 00 	sts	0x007C, r25
	ADMUX |= (channel & 0x0F);		//Set the new ADC channel
 2fa:	90 91 7c 00 	lds	r25, 0x007C
 2fe:	8f 70       	andi	r24, 0x0F	; 15
 300:	89 2b       	or	r24, r25
 302:	80 93 7c 00 	sts	0x007C, r24
	//ADCSRA |= ((1<<ADEN)|(1<<ADSC));	//Set the ADC enable and start bit to start the conversion
													//Keep the ADC clock the same.
	sbi(ADCSRA, ADSC);	//Start a conversion
 306:	80 91 7a 00 	lds	r24, 0x007A
 30a:	80 64       	ori	r24, 0x40	; 64
 30c:	80 93 7a 00 	sts	0x007A, r24
	//while(ADCSRA & (1<<ADSC));	//Wait for the conversion to finish
	while(bit_is_set(ADCSRA, ADSC));
 310:	80 91 7a 00 	lds	r24, 0x007A
 314:	86 fd       	sbrc	r24, 6
 316:	fc cf       	rjmp	.-8      	; 0x310 <adcRead+0x20>
	
	adc_value=ADCL;				//Get the lowest 8 bits of the 10 bit conversion
 318:	20 91 78 00 	lds	r18, 0x0078
 31c:	30 e0       	ldi	r19, 0x00	; 0
	adc_value |= (ADCH << 8);	//Get the upper 2 bits of the 10 bit conversion
 31e:	40 91 79 00 	lds	r20, 0x0079
 322:	94 2f       	mov	r25, r20
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	28 2b       	or	r18, r24
 328:	39 2b       	or	r19, r25
	
	return adc_value;			//Send the value back to the calling function
}
 32a:	c9 01       	movw	r24, r18
 32c:	08 95       	ret

0000032e <adcVoltage>:
unsigned long adcVoltage(unsigned int adc_value)
{
	unsigned long voltage=0;
	
	//Convert the ADC count to a voltage in mV assuming the reference voltage is 5 V
	voltage = (adc_value * 5000);
 32e:	28 e8       	ldi	r18, 0x88	; 136
 330:	33 e1       	ldi	r19, 0x13	; 19
 332:	a9 01       	movw	r20, r18
 334:	84 9f       	mul	r24, r20
 336:	90 01       	movw	r18, r0
 338:	85 9f       	mul	r24, r21
 33a:	30 0d       	add	r19, r0
 33c:	94 9f       	mul	r25, r20
 33e:	30 0d       	add	r19, r0
 340:	11 24       	eor	r1, r1
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	8a e0       	ldi	r24, 0x0A	; 10
 348:	56 95       	lsr	r21
 34a:	47 95       	ror	r20
 34c:	37 95       	ror	r19
 34e:	27 95       	ror	r18
 350:	8a 95       	dec	r24
 352:	d1 f7       	brne	.-12     	; 0x348 <adcVoltage+0x1a>
	voltage = voltage/1024;
	
	return voltage;
	
}
 354:	b9 01       	movw	r22, r18
 356:	ca 01       	movw	r24, r20
 358:	08 95       	ret

0000035a <adcInit>:
//Outputs: None
//Return: None
//Usage: adcInit(3, 0, 7);
void adcInit(char reference, char align, char clock)
{
	ADMUX = (reference << REFS0);	//Shift the reference voltage into the ADMUX register
 35a:	82 95       	swap	r24
 35c:	88 0f       	add	r24, r24
 35e:	88 0f       	add	r24, r24
 360:	80 7c       	andi	r24, 0xC0	; 192
 362:	ec e7       	ldi	r30, 0x7C	; 124
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 83       	st	Z, r24
	ADMUX |= (align << ADLAR);		//Shift the left adjust into the ADMUX register
 368:	80 81       	ld	r24, Z
 36a:	62 95       	swap	r22
 36c:	66 0f       	add	r22, r22
 36e:	60 7e       	andi	r22, 0xE0	; 224
 370:	86 2b       	or	r24, r22
 372:	80 83       	st	Z, r24
	
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 374:	ea e7       	ldi	r30, 0x7A	; 122
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	84 60       	ori	r24, 0x04	; 4
 37c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 37e:	80 81       	ld	r24, Z
 380:	82 60       	ori	r24, 0x02	; 2
 382:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 384:	80 81       	ld	r24, Z
 386:	81 60       	ori	r24, 0x01	; 1
 388:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);	
 38a:	80 81       	ld	r24, Z
 38c:	80 68       	ori	r24, 0x80	; 128
 38e:	80 83       	st	Z, r24
 390:	08 95       	ret

00000392 <putchar>:
 392:	60 91 20 01 	lds	r22, 0x0120
 396:	70 91 21 01 	lds	r23, 0x0121
 39a:	0e 94 05 02 	call	0x40a	; 0x40a <fputc>
 39e:	08 95       	ret

000003a0 <puts>:
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	8c 01       	movw	r16, r24
 3aa:	e0 91 20 01 	lds	r30, 0x0120
 3ae:	f0 91 21 01 	lds	r31, 0x0121
 3b2:	83 81       	ldd	r24, Z+3	; 0x03
 3b4:	81 ff       	sbrs	r24, 1
 3b6:	21 c0       	rjmp	.+66     	; 0x3fa <puts+0x5a>
 3b8:	c0 e0       	ldi	r28, 0x00	; 0
 3ba:	d0 e0       	ldi	r29, 0x00	; 0
 3bc:	0d c0       	rjmp	.+26     	; 0x3d8 <puts+0x38>
 3be:	e0 91 20 01 	lds	r30, 0x0120
 3c2:	f0 91 21 01 	lds	r31, 0x0121
 3c6:	20 85       	ldd	r18, Z+8	; 0x08
 3c8:	31 85       	ldd	r19, Z+9	; 0x09
 3ca:	bf 01       	movw	r22, r30
 3cc:	f9 01       	movw	r30, r18
 3ce:	09 95       	icall
 3d0:	89 2b       	or	r24, r25
 3d2:	11 f0       	breq	.+4      	; 0x3d8 <puts+0x38>
 3d4:	cf ef       	ldi	r28, 0xFF	; 255
 3d6:	df ef       	ldi	r29, 0xFF	; 255
 3d8:	f8 01       	movw	r30, r16
 3da:	81 91       	ld	r24, Z+
 3dc:	8f 01       	movw	r16, r30
 3de:	88 23       	and	r24, r24
 3e0:	71 f7       	brne	.-36     	; 0x3be <puts+0x1e>
 3e2:	e0 91 20 01 	lds	r30, 0x0120
 3e6:	f0 91 21 01 	lds	r31, 0x0121
 3ea:	20 85       	ldd	r18, Z+8	; 0x08
 3ec:	31 85       	ldd	r19, Z+9	; 0x09
 3ee:	8a e0       	ldi	r24, 0x0A	; 10
 3f0:	bf 01       	movw	r22, r30
 3f2:	f9 01       	movw	r30, r18
 3f4:	09 95       	icall
 3f6:	89 2b       	or	r24, r25
 3f8:	11 f0       	breq	.+4      	; 0x3fe <puts+0x5e>
 3fa:	cf ef       	ldi	r28, 0xFF	; 255
 3fc:	df ef       	ldi	r29, 0xFF	; 255
 3fe:	ce 01       	movw	r24, r28
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	08 95       	ret

0000040a <fputc>:
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	8c 01       	movw	r16, r24
 414:	eb 01       	movw	r28, r22
 416:	8b 81       	ldd	r24, Y+3	; 0x03
 418:	81 ff       	sbrs	r24, 1
 41a:	1b c0       	rjmp	.+54     	; 0x452 <fputc+0x48>
 41c:	82 ff       	sbrs	r24, 2
 41e:	0d c0       	rjmp	.+26     	; 0x43a <fputc+0x30>
 420:	2e 81       	ldd	r18, Y+6	; 0x06
 422:	3f 81       	ldd	r19, Y+7	; 0x07
 424:	8c 81       	ldd	r24, Y+4	; 0x04
 426:	9d 81       	ldd	r25, Y+5	; 0x05
 428:	28 17       	cp	r18, r24
 42a:	39 07       	cpc	r19, r25
 42c:	64 f4       	brge	.+24     	; 0x446 <fputc+0x3c>
 42e:	e8 81       	ld	r30, Y
 430:	f9 81       	ldd	r31, Y+1	; 0x01
 432:	01 93       	st	Z+, r16
 434:	f9 83       	std	Y+1, r31	; 0x01
 436:	e8 83       	st	Y, r30
 438:	06 c0       	rjmp	.+12     	; 0x446 <fputc+0x3c>
 43a:	e8 85       	ldd	r30, Y+8	; 0x08
 43c:	f9 85       	ldd	r31, Y+9	; 0x09
 43e:	80 2f       	mov	r24, r16
 440:	09 95       	icall
 442:	89 2b       	or	r24, r25
 444:	31 f4       	brne	.+12     	; 0x452 <fputc+0x48>
 446:	8e 81       	ldd	r24, Y+6	; 0x06
 448:	9f 81       	ldd	r25, Y+7	; 0x07
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	9f 83       	std	Y+7, r25	; 0x07
 44e:	8e 83       	std	Y+6, r24	; 0x06
 450:	02 c0       	rjmp	.+4      	; 0x456 <fputc+0x4c>
 452:	0f ef       	ldi	r16, 0xFF	; 255
 454:	1f ef       	ldi	r17, 0xFF	; 255
 456:	c8 01       	movw	r24, r16
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	08 95       	ret

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
